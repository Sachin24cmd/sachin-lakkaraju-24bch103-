{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Sachin24cmd/sachin-lakkaraju-24bch103-/blob/main/lab%203%2C%20if%20conditions%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "source": [
        "#1) Print largest and smallest values out of two.\n",
        "def find_largest_smallest_two(num1, num2):\n",
        "  \"\"\"Finds the largest and smallest of two numbers.\n",
        "\n",
        "  Args:\n",
        "    num1: The first number.\n",
        "    num2: The second number.\n",
        "\n",
        "  Returns:\n",
        "    A tuple containing the largest and smallest numbers.\n",
        "  \"\"\"\n",
        "  largest = max(num1, num2)\n",
        "  smallest = min(num1, num2)\n",
        "  print(\"Largest:\", largest)\n",
        "  print(\"Smallest:\", smallest)\n",
        "\n",
        "# Example usage\n",
        "find_largest_smallest_two(10, 5)"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "PhTKbzYYKoa3",
        "outputId": "ffd0624a-4b96-4588-f0a3-d99b3ca083a4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Largest: 10\n",
            "Smallest: 5\n"
          ]
        }
      ]
    },
    {
      "source": [
        "# 2) Print largest and smallest values out of three.\n",
        "def find_largest_smallest_three(num1, num2, num3):\n",
        "  \"\"\"Finds the largest and smallest of three numbers.\n",
        "\n",
        "  Args:\n",
        "    num1: The first number.\n",
        "    num2: The second number.\n",
        "    num3: The third number.\n",
        "\n",
        "  Returns:\n",
        "    A tuple containing the largest and smallest numbers.\n",
        "  \"\"\"\n",
        "  largest = max(num1, num2, num3)\n",
        "  smallest = min(num1, num2, num3)\n",
        "  print(\"Largest:\", largest)\n",
        "  print(\"Smallest:\", smallest)\n",
        "\n",
        "# Example usage\n",
        "find_largest_smallest_three(10, 5, 15)"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "waES4SajKq-2",
        "outputId": "b7a4e4a2-861f-48ea-953b-357c66c1ba1e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Largest: 15\n",
            "Smallest: 5\n"
          ]
        }
      ]
    },
    {
      "source": [
        "#3) Check whether a given number is odd or even.\n",
        "def check_odd_even(number):\n",
        "  \"\"\"Checks if a number is odd or even.\n",
        "\n",
        "  Args:\n",
        "    number: The number to check.\n",
        "  \"\"\"\n",
        "  if number % 2 == 0:\n",
        "    print(number, \"is even\")\n",
        "  else:\n",
        "    print(number, \"is odd\")\n",
        "\n",
        "# Example usage\n",
        "check_odd_even(7)"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "WTlfM2q8KtEX",
        "outputId": "15fcb2e0-950a-433f-c9f7-9affcadc65a1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "7 is odd\n"
          ]
        }
      ]
    },
    {
      "source": [
        "# 4) Check whether a given number is divisible by 10 or not.\n",
        "def check_divisible_by_10(number):\n",
        "  \"\"\"Checks if a number is divisible by 10.\n",
        "\n",
        "  Args:\n",
        "    number: The number to check.\n",
        "  \"\"\"\n",
        "  if number % 10 == 0:\n",
        "    print(number, \"is divisible by 10\")\n",
        "  else:\n",
        "    print(number, \"is not divisible by 10\")\n",
        "\n",
        "# Example usage\n",
        "check_divisible_by_10(20)"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "CYa4s6-yKtm1",
        "outputId": "a306ff52-51c0-44ab-8396-9aa44f2b0a44",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "20 is divisible by 10\n"
          ]
        }
      ]
    },
    {
      "source": [
        "# 5) Accept age of a person. If age is less than 18, print minor otherwise Major\n",
        "def determine_minor_major(age):\n",
        "  \"\"\"Determines if a person is a minor or major based on age.\n",
        "\n",
        "  Args:\n",
        "    age: The age of the person.\n",
        "  \"\"\"\n",
        "  if age < 18:\n",
        "    print(\"Minor\")\n",
        "  else:\n",
        "    print(\"Major\")\n",
        "\n",
        "# Example usage\n",
        "determine_minor_major(15)"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "lUF4VVJpKubt",
        "outputId": "32d62f37-671f-4312-9386-dfe8b4c14ee7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Minor\n"
          ]
        }
      ]
    },
    {
      "source": [
        "# 6) Accept a number from the user. And print number of digits in it\n",
        "def count_digits(number):\n",
        "  \"\"\"Counts the number of digits in a number.\n",
        "\n",
        "  Args:\n",
        "    number: The number.\n",
        "\n",
        "  Returns:\n",
        "    The number of digits in the number.\n",
        "  \"\"\"\n",
        "  count = len(str(number))\n",
        "  print(\"Number of digits:\", count)\n",
        "\n",
        "# Example usage\n",
        "count_digits(12345)"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "CfwgkFkKKu79",
        "outputId": "6ec58c0d-0ca4-49cc-df75-665843bfc0a4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of digits: 5\n"
          ]
        }
      ]
    },
    {
      "source": [
        "#7) Accept a year value from the user. Check whether it is a leap year or not.\n",
        "def check_leap_year(year):\n",
        "  \"\"\"Checks if a year is a leap year.\n",
        "\n",
        "  Args:\n",
        "    year: The year to check.\n",
        "  \"\"\"\n",
        "  if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n",
        "    print(year, \"is a leap year\")\n",
        "  else:\n",
        "    print(year, \"is not a leap year\")\n",
        "\n",
        "# Example usage\n",
        "check_leap_year(2024)"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "c9nYqOY8Kvs5",
        "outputId": "1d88ac16-e880-4981-c230-0ca2a4686434",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024 is a leap year\n"
          ]
        }
      ]
    },
    {
      "source": [
        "# 8) Check whether a triangle is valid or not, when the three angles of the triangle are entered\n",
        "# through the keyboard. A triangle is valid if te sum of all the three angles is equal to 180 degrees.\n",
        "\n",
        "def check_triangle_validity(angle1, angle2, angle3):\n",
        "  \"\"\"Checks if a triangle is valid based on its angles.\n",
        "\n",
        "  Args:\n",
        "    angle1: The first angle.\n",
        "    angle2: The second angle.\n",
        "    angle3: The third angle.\n",
        "  \"\"\"\n",
        "  if angle1 + angle2 + angle3 == 180:\n",
        "    print(\"Valid triangle\")\n",
        "  else:\n",
        "    print(\"Invalid triangle\")\n",
        "\n",
        "# Example usage\n",
        "check_triangle_validity(60, 60, 60)"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "qQgFNYMCKwKv",
        "outputId": "35adc634-9aba-483b-c717-f7a8e740f872",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Valid triangle\n"
          ]
        }
      ]
    },
    {
      "source": [
        "# 9) Print absolute value of a given number.\n",
        "def print_absolute_value(number):\n",
        "  \"\"\"Prints the absolute value of a number.\n",
        "\n",
        "  Args:\n",
        "    number: The number.\n",
        "  \"\"\"\n",
        "  absolute_value = abs(number)\n",
        "  print(\"Absolute value:\", absolute_value)\n",
        "\n",
        "# Example usage\n",
        "print_absolute_value(-5)"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "TWtQWqk0Kwpm",
        "outputId": "8ba224fd-b898-4e64-f972-8e8a110e06bd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Absolute value: 5\n"
          ]
        }
      ]
    },
    {
      "source": [
        "#10) Given the length and breadth of a rectangle, write a program to find whether the are of the\n",
        "#rectangle is greater than its perimeter.\n",
        "def compare_area_perimeter(length, breadth):\n",
        "  \"\"\"Compares the area and perimeter of a rectangle.\n",
        "\n",
        "  Args:\n",
        "    length: The length of the rectangle.\n",
        "    breadth: The breadth of the rectangle.\n",
        "  \"\"\"\n",
        "  area = length * breadth\n",
        "  perimeter = 2 * (length + breadth)\n",
        "\n",
        "  if area > perimeter:\n",
        "    print(\"Area is greater than perimeter\")\n",
        "  else:\n",
        "    print(\"Area is not greater than perimeter\")\n",
        "\n",
        "# Example usage\n",
        "compare_area_perimeter(5, 4)"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "SNmqZuq3KxLu",
        "outputId": "38e32f30-d7ac-4625-a29b-e0effba55e79",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Area is greater than perimeter\n"
          ]
        }
      ]
    },
    {
      "source": [
        "# 11) Given three points (x1,y1), (x2,y2) and (x3,y3), check if all the three points fall on one straight line.\n",
        "def check_collinear(x1, y1, x2, y2, x3, y3):\n",
        "  \"\"\"Checks if three points are collinear.\n",
        "\n",
        "  Args:\n",
        "    x1, y1: Coordinates of the first point.\n",
        "    x2, y2: Coordinates of the second point.\n",
        "    x3, y3: Coordinates of the third point.\n",
        "  \"\"\"\n",
        "  if (y2 - y1) * (x3 - x2) == (y3 - y2) * (x2 - x1):\n",
        "    print(\"Points are collinear\")\n",
        "  else:\n",
        "    print(\"Points are not collinear\")\n",
        "\n",
        "# Example usage\n",
        "check_collinear(1, 1, 2, 2, 3, 3)"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "WK43DdY-Kx2e",
        "outputId": "93f21df5-7c5d-404c-fa9f-4ec878471a8a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Points are collinear\n"
          ]
        }
      ]
    },
    {
      "source": [
        "#12) Given the coordinates (x,y) of center of a circle and its radius, determine whether a point lies\n",
        "# inside the circle, on the circle or outside the circle.\n",
        "import math\n",
        "\n",
        "def determine_point_position(x, y, center_x, center_y, radius):\n",
        "  \"\"\"Determines the position of a point relative to a circle.\n",
        "\n",
        "  Args:\n",
        "    x, y: Coordinates of the point.\n",
        "    center_x, center_y: Coordinates of the circle's center.\n",
        "    radius: The radius of the circle.\n",
        "  \"\"\"\n",
        "  distance = math.sqrt((x - center_x)**2 + (y - center_y)**2)\n",
        "\n",
        "  if distance < radius:\n",
        "    print(\"Point is inside the circle\")\n",
        "  elif distance == radius:\n",
        "    print(\"Point is on the circle\")\n",
        "  else:\n",
        "    print(\"Point is outside the circle\")\n",
        "\n",
        "# Example usage\n",
        "determine_point_position(2, 2, 0, 0, 3)"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "KR8yTN9iKyfb",
        "outputId": "f13785ac-0eaf-436f-970e-7d9c5e1ab70b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Point is inside the circle\n"
          ]
        }
      ]
    },
    {
      "source": [
        "# 13) Convert number 0 to 19 to its equivalent words\n",
        "def number_to_words(number):\n",
        "  \"\"\"Converts a number from 0 to 19 to its equivalent word.\n",
        "\n",
        "  Args:\n",
        "    number: The number to convert.\n",
        "\n",
        "  Returns:\n",
        "    The word representation of the number.\n",
        "  \"\"\"\n",
        "  words = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\",\n",
        "           \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"]\n",
        "  if 0 <= number <= 19:\n",
        "    print(words[number])\n",
        "  else:\n",
        "    print(\"Number out of range\")\n",
        "\n",
        "# Example usage\n",
        "number_to_words(10)"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "arLLl2ubKzNX",
        "outputId": "03d99c0b-9a21-4fa8-a1d2-658e55c485fc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ten\n"
          ]
        }
      ]
    },
    {
      "source": [
        "# 14)calculate the total, average, pass/fail status, and assign grades based on the marks of three subjects:\n",
        "def calculate_result(marks1, marks2, marks3):\n",
        "  \"\"\"Calculates total, average, and grade of marks.\n",
        "\n",
        "  Args:\n",
        "    marks1: Marks in the first subject.\n",
        "    marks2: Marks in the second subject.\n",
        "    marks3: Marks in the third subject.\n",
        "  \"\"\"\n",
        "  total = marks1 + marks2 + marks3\n",
        "  average = total / 3\n",
        "\n",
        "  print(\"Total:\", total)\n",
        "  print(\"Average:\", average)\n",
        "\n",
        "  if marks1 <= 39 or marks2 <= 39 or marks3 <= 39:\n",
        "    print(\"Fail\")\n",
        "  else:\n",
        "    print(\"Pass\")\n",
        "\n",
        "  def get_grade(marks):\n",
        "    if marks == 'NA':\n",
        "      return 'NA'\n",
        "    elif 0 <= marks <= 39:\n",
        "      return 'F'\n",
        "    elif 40 <= marks <= 44:\n",
        "      return 'P'\n",
        "    elif 45 <= marks <= 49:\n",
        "      return 'C'\n",
        "    elif 50 <= marks <= 54:\n",
        "      return 'B'\n",
        "    elif 55 <= marks <= 59:\n",
        "      return 'B+'\n",
        "    elif 60 <= marks <= 69:\n",
        "      return 'A'\n",
        "    elif 70 <= marks <= 79:\n",
        "      return 'A+'\n",
        "    elif 80 <= marks <= 100:\n",
        "      return 'O'\n",
        "    else:\n",
        "      return 'Invalid Marks'\n",
        "\n",
        "  print(\"Grade for subject 1:\", get_grade(marks1))\n",
        "  print(\"Grade for subject 2:\", get_grade(marks2))\n",
        "  print(\"Grade for subject 3:\", get_grade(marks3))\n",
        "\n",
        "# Example usage\n",
        "calculate_result(75, 60, 80)"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "njxQlx0lK0WO",
        "outputId": "b49cd6b2-9ba0-494d-abd2-fe96493b15af",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Total: 215\n",
            "Average: 71.66666666666667\n",
            "Pass\n",
            "Grade for subject 1: A+\n",
            "Grade for subject 2: A\n",
            "Grade for subject 3: O\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "name": "Welcome To Colab",
      "toc_visible": true,
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}